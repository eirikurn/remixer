// Generated by CoffeeScript 1.3.3
(function() {
  var BlobBuilder, MainViewModel, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  exports = window;

  exports.pc = function(percent) {
    return Math.round(percent * 100) + '%';
  };

  BlobBuilder = window.BlobBuilder || window.WebkitBlobBuilder || window.MozBlobBuilder;

  MainViewModel = (function() {

    MainViewModel.prototype.songCount = 0;

    function MainViewModel() {
      this.fileHover = __bind(this.fileHover, this);

      this.loadedAnalysis = __bind(this.loadedAnalysis, this);

      this.loadedBuffer = __bind(this.loadedBuffer, this);

      this.fileSelect = __bind(this.fileSelect, this);
      this.songs = ko.observableArray();
      this.mix = new Mix(this.songs);
      this.duration = 0;
      window.pxMinRatio = ko.observable(1);
      Player.setCursor(this.mix, 0);
      this.loadingStatus = ko.observable("");
      $('#fileinput').on('change', this.fileSelect);
      $('#filedrag').on('dragover', this.fileHover);
      $('#filedrag').on('dragleave', this.fileHover);
      $('#filedrag').on('drop', this.fileSelect);
    }

    MainViewModel.prototype.fileSelect = function(e) {
      var file;
      this.fileHover(e);
      file = (e.target.files || e.originalEvent.dataTransfer.files)[0];
      Loader.loadSoundFromFile(file, this.loadedBuffer, this.loadedAnalysis);
      return this.loadingStatus("Loading track");
    };

    MainViewModel.prototype.loadAdele = function() {
      Loader.loadSoundFromUrl('/mp3/adele.m4a', this.loadedBuffer, this.loadedAnalysis);
      return this.loadingStatus("Downloading track");
    };

    MainViewModel.prototype.loadedBuffer = function(buffer) {
      var song, waveform;
      this.duration = buffer.duration;
      waveform = this.generateWaveform(buffer);
      song = new Song(this.songCount++, buffer, waveform);
      this.songs.push(song);
      Player.setCursor(song);
      this.loadingStatus("Analysing track");
      window.pxMinRatio($('.timeline:first').innerWidth() / this.duration);
      song.selection.width = $('.timeline').innerWidth();
      return song.selection.padding = $('.timeline').offset().left;
    };

    MainViewModel.prototype.generateWaveform = function(buffer) {
      var canvas;
      canvas = $('<canvas width="1800" height="280">')[0];
      WaveSurfer.Drawer.init({
        canvas: canvas,
        color: '#efefef'
      });
      WaveSurfer.Drawer.drawBuffer(buffer);
      return canvas.toDataURL('image/png');
    };

    MainViewModel.prototype.loadedAnalysis = function(analysis) {
      this.songs()[this.songs().length - 1].json(analysis);
      return this.loadingStatus("");
    };

    MainViewModel.prototype.exportMp3 = function() {
      var _this = this;
      return WebAudio.record(this.mix.duration, function() {
        return _this.mix.play();
      }, function(buffer) {
        return Loader.convertToMp3(buffer, function(url) {
          return location.href = url;
        });
      });
    };

    MainViewModel.prototype.cheat = function(start) {
      var bars, bpm, cur, duration, sectionSizes, sections, song;
      if (start == null) {
        start = 0.28;
      }
      bpm = 107.991;
      song = this.songs()[0];
      start = start;
      duration = (1 / (bpm / 60)) * 4;
      bars = [];
      while (start < song.duration) {
        bars.push({
          start: start,
          duration: duration
        });
        start += duration;
      }
      sectionSizes = [
        {
          s: 4,
          c: 0
        }, {
          s: 16,
          c: 3
        }, {
          s: 7,
          c: 6
        }, {
          s: 8,
          c: 9
        }, {
          s: 8,
          c: 3
        }, {
          s: 7,
          c: 6
        }, {
          s: 16,
          c: 9
        }, {
          s: 16,
          c: 12
        }, {
          s: 8,
          c: 9
        }, {
          s: 16,
          c: 19
        }, {
          s: 3,
          c: 0
        }
      ];
      cur = 0;
      sections = sectionSizes.map(function(_arg) {
        var color, section, size;
        size = _arg.s, color = _arg.c;
        section = {
          start: bars[cur].start,
          duration: size * duration,
          color: color
        };
        cur += size;
        return section;
      });
      return song.json({
        sections: sections,
        bars: bars,
        meta: song.json().meta
      });
    };

    MainViewModel.prototype.fileHover = function(e) {
      e.stopPropagation();
      e.preventDefault();
      return $(e.target).toggleClass('hover', e.type === 'dragover');
    };

    MainViewModel.prototype.playSection = function(section) {
      Player.setCursor(this.song, section.start, section.duration);
      return Player.play();
    };

    MainViewModel.prototype.keydown = function(data, event) {
      if (event.keyCode === 32) {
        Player.toggle();
        return false;
      }
      return true;
    };

    MainViewModel.prototype.setCursor = function() {
      return Player.setCursor(this.mix, 0);
    };

    return MainViewModel;

  })();

  exports.vm = new MainViewModel();

  ko.applyBindings(exports.vm, $('body')[0]);

}).call(this);
