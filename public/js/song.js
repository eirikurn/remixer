// Generated by CoffeeScript 1.3.3
(function() {
  var Song,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Song = (function(_super) {

    __extends(Song, _super);

    function Song(id, buffer, waveform) {
      var _this = this;
      this.id = id;
      this.buffer = buffer;
      this.waveform = waveform;
      this.duration = buffer.duration;
      this.json = ko.observable({});
      this.beats = ko.computed(function() {
        return _this.json().bars || [];
      });
      this.sections = ko.computed(function() {
        return _this.json().sections || [];
      });
      this.name = ko.computed(function() {
        var _ref;
        if ((_ref = _this.json()) != null ? _ref.meta : void 0) {
          return _this.json().meta.title + ' by ' + _this.json().meta.artist;
        } else {
          return "Unknown artist";
        }
      });
      this.json.subscribe(function(newValue) {
        var last;
        newValue.bars.unshift({
          confidence: 1.00,
          duration: newValue.bars[0].start,
          start: 0
        });
        last = newValue.bars[newValue.bars.length - 1];
        return newValue.bars.push({
          confidence: 1.00,
          duration: buffer.length - last.start - last.duration,
          start: last.start + last.duration
        });
      });
      this.isSelecting = ko.observable(false);
      this.selection = {
        start: ko.observable(0),
        left: ko.observable(),
        right: ko.observable(),
        width: $('.timeline').innerWidth(),
        padding: $('.timeline').offset().left
      };
      Song.__super__.constructor.apply(this, arguments);
    }

    Song.prototype.getEvent = function(event) {
      var x;
      x = event.clientX - this.selection.padding;
      return {
        x: x,
        minutes: x / window.pxMinRatio()
      };
    };

    Song.prototype.nextBeat = function(minutes, larger) {
      var item, num, result;
      result = _.sortedIndex(_.pluck(this.beats(), 'start'), minutes);
      item = this.beats()[result > 0 ? result - 1 : result];
      if (!item) {
        return minutes * pxMinRatio();
      }
      if (larger) {
        num = item.start + item.duration;
      } else {
        num = item.start;
      }
      return num * window.pxMinRatio();
    };

    Song.prototype.mousedown = function(data, event) {
      var x;
      if (event.target.className === "selector") {
        return true;
      }
      event = this.getEvent(event);
      this.isSelecting(true);
      x = this.nextBeat(event.minutes);
      this.selection.start(x + 0);
      this.selection.left(x + 0);
      return this.selection.right(this.selection.width - x);
    };

    Song.prototype.mouseup = function(data, event) {
      var sel;
      this.isSelecting(false);
      sel = this.getSelection();
      if (Math.floor(sel.start) === Math.floor(sel.end)) {
        return Player.setCursor(this, sel.start);
      } else {
        return Player.setCursor(this, sel.start, sel.duration);
      }
    };

    Song.prototype.mousemove = function(data, event) {
      var current;
      event = this.getEvent(event);
      if (this.isSelecting()) {
        current = this.nextBeat(event.minutes);
        if (current < this.selection.start()) {
          this.selection.left(current);
          this.selection.right(this.selection.width - this.selection.start());
        } else {
          current = this.nextBeat(event.minutes, true);
          this.selection.left(this.selection.start());
          this.selection.right(this.selection.width - current);
        }
      }
    };

    Song.prototype.dragstart = function(data, event) {
      var dt, elem, sel;
      dt = event.originalEvent.dataTransfer;
      dt.effectAllowed = 'copy';
      sel = this.getSelection();
      dt.setData('text/plain', data.id + '-' + sel.start + '-' + sel.duration);
      elem = $('<div>Place this in your mix!</div>').appendTo('body');
      dt.setDragImage(elem[0], 50, 50);
      setTimeout(function() {
        return elem.remove();
      }, 0);
      return true;
    };

    Song.prototype.dblclick = function(data, event) {
      var item, result;
      event = this.getEvent(event);
      result = _.sortedIndex(_.pluck(this.sections(), 'start'), event.minutes);
      item = this.sections()[result > 0 ? result - 1 : result];
      this.selection.start(item.start * window.pxMinRatio());
      this.selection.left(item.start * window.pxMinRatio());
      this.selection.right(this.selection.width - ((item.start + item.duration) * window.pxMinRatio()));
      return Player.setCursor(this, item.start);
    };

    Song.prototype.getSelection = function() {
      var end, start, temp;
      start = this.selection.left() / window.pxMinRatio();
      end = (this.selection.width - this.selection.right()) / window.pxMinRatio();
      if (start > end) {
        temp = end;
        end = start;
        start = temp;
      }
      return {
        start: start,
        end: end,
        duration: end - start
      };
    };

    Song.prototype.play = function(start, duration) {
      var source;
      if (start == null) {
        start = 0;
      }
      if (duration == null) {
        duration = null;
      }
      source = WebAudio.playSound(this.buffer, start, duration);
      return [source];
    };

    Song.prototype.showSection = function(elem) {
      if (elem.nodeType === 1) {
        return $(elem).hide().fadeIn('slow');
      }
    };

    Song.prototype.colors = ['#2f243f', '#3c2c55', '#4a3768', '#565270', '#6b6b7c', '#72957f', '#86ad6e', '#a1bc5e', '#b8d954', '#d3e04e', '#ccad2a', '#cc8412', '#c1521d', '#ad3821', '#8a1010', '#681717', '#531e1e', '#3d1818', '#320a1b'];

    return Song;

  })(Track);

  window.Song = Song;

}).call(this);
