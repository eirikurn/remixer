// Generated by CoffeeScript 1.3.3
(function() {
  var Clip, Mix,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Clip = (function() {

    function Clip(song, start, duration) {
      this.song = song;
      this.start = start;
      this.duration = duration;
    }

    return Clip;

  })();

  Mix = (function(_super) {

    __extends(Mix, _super);

    function Mix(songs) {
      this.songs = songs;
      this.drop = __bind(this.drop, this);

      this.dragover = __bind(this.dragover, this);

      this.duration = 0;
      this.clips = ko.observableArray([]);
      Mix.__super__.constructor.apply(this, arguments);
    }

    Mix.prototype.addClip = function(clip) {
      this.clips.push(clip);
      return this.duration += clip.duration;
    };

    Mix.prototype.play = function(start, duration) {
      var end, foundEnd, foundStart, sources, totalDuration;
      if (start == null) {
        start = 0;
      }
      if (duration == null) {
        duration = null;
      }
      end = duration ? start + duration : this.duration;
      foundStart = false;
      foundEnd = false;
      totalDuration = 0;
      sources = [];
      this.clips().forEach(function(clip) {
        var clipDuration, clipStart, offset, source;
        if (foundEnd) {
          return;
        }
        clipStart = clip.start;
        clipDuration = clip.duration;
        if (!foundStart && totalDuration + clip.duration > start) {
          foundStart = true;
          offset = start - totalDuration;
          clipStart += offset;
          clipDuration -= offset;
        }
        if (!foundEnd && totalDuration + clip.duration >= end) {
          foundEnd = true;
          clipDuration -= totalDuration + clip.duration - end;
        }
        if (foundStart) {
          source = WebAudio.playSound(clip.song.buffer, clipStart, clipDuration, totalDuration - start);
          sources.push(source);
        }
        return totalDuration += clip.duration;
      });
      return sources;
    };

    Mix.prototype.dragover = function(data, event) {
      event.preventDefault();
      event.originalEvent.dataTransfer.dropEffect = 'copy';
      return false;
    };

    Mix.prototype.drop = function(data, event) {
      var arr;
      event.stopPropagation();
      data = event.originalEvent.dataTransfer.getData('text/plain');
      arr = data.split('-');
      return this.addClip(new Clip(this.songs()[data[0]], parseFloat(arr[1]), parseFloat(arr[2])));
    };

    return Mix;

  })(Track);

  window.Mix = Mix;

}).call(this);
